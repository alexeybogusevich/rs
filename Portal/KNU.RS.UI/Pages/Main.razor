@page "/main"
@using KNU.RS.Logic.Models.Patient
@using KNU.RS.Logic.Models.Doctor
@using KNU.RS.Logic.Models.Study
@using KNU.RS.Logic.Services.PatientService
@using KNU.RS.Logic.Services.DoctorService
@using KNU.RS.Logic.Services.StudyService
@inject IPatientService patientService
@inject IDoctorService doctorService
@inject IStudyService studyService
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

@attribute [Authorize]

<Title value="Реабілітація КНУ | Головна"></Title>

<AuthorizeView Roles="Patient">
    <Authorized>
        <RedirectToMyRecoveryPlans></RedirectToMyRecoveryPlans>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin,Doctor">
    <Authorized>
        @if (IsLoading)
        {
            <div class="spinner"></div>
        }
        else
        {
            <Panel Patients="Patients" NumberOfDoctors="Doctors.Count()" Studies="Studies"></Panel>
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool IsLoading { get; set; } = true;

    private List<PatientInfo> Patients { get; set; } = new List<PatientInfo>();
    private List<DoctorInfo> Doctors { get; set; } = new List<DoctorInfo>();
    private List<StudyInfo> Studies { get; set; } = new List<StudyInfo>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var patients = await patientService.GetInfoAsync();
        var doctors = await doctorService.GetInfoAsync();
        var studies = await studyService.GetInfoAsync();

        Studies = studies?.ToList();
        Patients = patients?.OrderByDescending(p => p.RegistrationDate)?.ToList();
        Doctors = doctors?.ToList();

        IsLoading = false;
    }
}
